from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

#import time
import kb
import DataBase
from states import InputUserData

router = Router()

@router.message(Command("start"))
async def start(message: Message):
    username = message.from_user.username

    if message.from_user.username == None:
        username = "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *{username}*! –Ø –ú–ò–†–≠–ê–ë–æ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–∫–∞–ª—é—Ö–∞–º–∏. –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.menu)

#–ü—Ä–µ–¥–ª–æ–∂–∫–∞
@router.callback_query(F.data == "pred")
async def start_predloshka(clbck: CallbackQuery):
    await clbck.message.edit_text("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∫–∞. –°—é–¥–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –¢–∞–∫–∂–µ —Ç—É—Ç –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è _–º–∏–Ω–∏-–ø—Ä–µ–¥–ª–æ–∂–∫–∏_ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!", reply_markup=kb.predloshka)




#–î–æ—Å—Ç–∞–≤–∫–∞
@router.callback_query(F.data == "delivery")
async def delivery(clbck: CallbackQuery):
    await clbck.message.edit_text("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=kb.order_menu_kb)

@router.callback_query(F.data == "courier")
async  def courier(clbck: CallbackQuery):
    orders = kb.create_order_buttons()
    await clbck.message.edit_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ):", reply_markup=orders.as_markup())


@router.callback_query(F.data == "client")
async def client(clbck: CallbackQuery, state: FSMContext):
    if len(DataBase.check_order_client(clbck.from_user.id)) > 0:
        await clbck.message.edit_text(f"*–ö–ª–∏–µ–Ω—Ç:* @{clbck.from_user.username}\n*–í–∞—à –∑–∞–∫–∞–∑: *'{DataBase.check_order_client(clbck.from_user.id)[0][2]}'\n\n_–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å_", reply_markup=kb.create_order_kb)

    else:
        await state.set_state(InputUserData.order_state)
        await clbck.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å (–≤–æ–¥–∞, –µ–¥–∞), —Ü–µ–Ω—É:") 

@router.message(InputUserData.order_state)
async def input_order(message: Message, state: FSMContext):
    await state.update_data(order_state=message.text)
    DataBase.add_client_delivery(message.from_user.id, message.text, message.from_user.username)
    await message.answer(f"*–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n'{DataBase.check_order_client(message.from_user.id)[0][2]}'", reply_markup=kb.create_order_kb)
    #time.sleep(3)
    #await message.edit_text(f"*–ö–ª–∏–µ–Ω—Ç:* @{message.from_user.username}\n*–í–∞—à –∑–∞–∫–∞–∑:*'{DataBase.check_order_client(message.from_user.id)[0][2]}'\n\n_–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å_", reply_markup=kb.create_order_kb)

@router.callback_query(F.data == "edit_order")
async def edit_order(clbck: CallbackQuery, state: FSMContext):
    await state.set_state(InputUserData.order_edit_state)
    await clbck.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É:")

@router.message(InputUserData.order_edit_state)
async def input_edit_order(message: Message, state: FSMContext):
    await state.update_data(order_edit_state=message.text)
    DataBase.update_client_delivery(message.from_user.id, message.text)
    await message.answer(f"*–ó–∞–∫–∞–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!*\n\n'{DataBase.check_order_client(message.from_user.id)[0][2]}'", reply_markup=kb.create_order_kb)
    #time.sleep(3)
    #await message.edit_text(f"*–ö–ª–∏–µ–Ω—Ç:* @{message.from_user.username}\n*–í–∞—à –∑–∞–∫–∞–∑:*'{DataBase.check_order_client(message.from_user.id)[0][2]}'\n\n_–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å_", reply_markup=kb.create_order_kb)

@router.callback_query(F.data == "delete_order")
async def delete_order(clbck: CallbackQuery):
    DataBase.delete_client_delivery(clbck.from_user.id)
    await clbck.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑!", show_alert=True)
    await clbck.message.edit_text("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=kb.order_menu_kb)

@router.callback_query(F.data.startswith("order_call_"))
async def callback_order(clbck: CallbackQuery):
    await clbck.message.edit_text(f"*–ö–ª–∏–µ–Ω—Ç:* @{DataBase.check_order_client(clbck.data[11:])[0][3]}\n*–ó–∞–∫–∞–∑:* {DataBase.check_order_client(clbck.data[11:])[0][2]}\n\n–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb.apply_order_kb) 

@router.callback_query(F.data == "refuse_order")
async def refuse_applyorder(clbck: CallbackQuery):
    await clbck.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞", show_alert=True)
    orders = kb.create_order_buttons()
    await clbck.message.edit_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ):", reply_markup=orders.as_markup())

@router.callback_query(F.data == "back")
async def back(clbck: CallbackQuery):
    await clbck.message.edit_text("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=kb.order_menu_kb)

@router.callback_query(F.data == "backmenu")
async def backmenu(clbck: CallbackQuery):
    await clbck.message.edit_text("üìå                   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é                  üìå", reply_markup=kb.menu)

